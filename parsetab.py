
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEnonassocEQLTGTDIVIDE EQ EQUALS GT ID IF LBRACE LPAREN LT MINUS NUMBER PLUS RBRACE RPAREN SEMICOLON TIMES WHILEprogram : statementsstatements : statement\n| statements statementstatement : assignment\n| if_stmt\n| while_stmtassignment : ID EQUALS expression SEMICOLONif_stmt : IF LPAREN expression RPAREN LBRACE statements RBRACEwhile_stmt : WHILE LPAREN expression RPAREN LBRACE statements RBRACEexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression EQ expression\n| expression LT expression\n| expression GT expressionexpression : NUMBERexpression : IDexpression : LPAREN expression RPAREN'
    
_lr_action_items = {'ID':([0,2,3,4,5,6,10,11,12,13,17,20,21,22,23,24,25,26,27,39,40,41,42,43,44,],[7,7,-2,-4,-5,-6,-3,14,14,14,14,-7,14,14,14,14,14,14,14,7,7,7,7,-8,-9,]),'IF':([0,2,3,4,5,6,10,20,39,40,41,42,43,44,],[8,8,-2,-4,-5,-6,-3,-7,8,8,8,8,-8,-9,]),'WHILE':([0,2,3,4,5,6,10,20,39,40,41,42,43,44,],[9,9,-2,-4,-5,-6,-3,-7,9,9,9,9,-8,-9,]),'$end':([1,2,3,4,5,6,10,20,43,44,],[0,-1,-2,-4,-5,-6,-3,-7,-8,-9,]),'RBRACE':([3,4,5,6,10,20,41,42,43,44,],[-2,-4,-5,-6,-3,-7,43,44,-8,-9,]),'EQUALS':([7,],[11,]),'LPAREN':([8,9,11,12,13,17,21,22,23,24,25,26,27,],[12,13,17,17,17,17,17,17,17,17,17,17,17,]),'NUMBER':([11,12,13,17,21,22,23,24,25,26,27,],[16,16,16,16,16,16,16,16,16,16,16,]),'SEMICOLON':([14,15,16,31,32,33,34,35,36,37,38,],[-18,20,-17,-10,-11,-12,-13,-14,-15,-16,-19,]),'PLUS':([14,15,16,18,19,28,31,32,33,34,35,36,37,38,],[-18,21,-17,21,21,21,-10,-11,-12,-13,-14,-15,-16,-19,]),'MINUS':([14,15,16,18,19,28,31,32,33,34,35,36,37,38,],[-18,22,-17,22,22,22,-10,-11,-12,-13,-14,-15,-16,-19,]),'TIMES':([14,15,16,18,19,28,31,32,33,34,35,36,37,38,],[-18,23,-17,23,23,23,23,23,-12,-13,-14,-15,-16,-19,]),'DIVIDE':([14,15,16,18,19,28,31,32,33,34,35,36,37,38,],[-18,24,-17,24,24,24,24,24,-12,-13,-14,-15,-16,-19,]),'EQ':([14,15,16,18,19,28,31,32,33,34,35,36,37,38,],[-18,25,-17,25,25,25,25,25,25,25,None,None,None,-19,]),'LT':([14,15,16,18,19,28,31,32,33,34,35,36,37,38,],[-18,26,-17,26,26,26,26,26,26,26,None,None,None,-19,]),'GT':([14,15,16,18,19,28,31,32,33,34,35,36,37,38,],[-18,27,-17,27,27,27,27,27,27,27,None,None,None,-19,]),'RPAREN':([14,16,18,19,28,31,32,33,34,35,36,37,38,],[-18,-17,29,30,38,-10,-11,-12,-13,-14,-15,-16,-19,]),'LBRACE':([29,30,],[39,40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,39,40,],[2,41,42,]),'statement':([0,2,39,40,41,42,],[3,10,3,3,10,10,]),'assignment':([0,2,39,40,41,42,],[4,4,4,4,4,4,]),'if_stmt':([0,2,39,40,41,42,],[5,5,5,5,5,5,]),'while_stmt':([0,2,39,40,41,42,],[6,6,6,6,6,6,]),'expression':([11,12,13,17,21,22,23,24,25,26,27,],[15,18,19,28,31,32,33,34,35,36,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',19),
  ('statements -> statement','statements',1,'p_statements','parser.py',23),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',24),
  ('statement -> assignment','statement',1,'p_statement','parser.py',31),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',32),
  ('statement -> while_stmt','statement',1,'p_statement','parser.py',33),
  ('assignment -> ID EQUALS expression SEMICOLON','assignment',4,'p_assignment','parser.py',37),
  ('if_stmt -> IF LPAREN expression RPAREN LBRACE statements RBRACE','if_stmt',7,'p_if_stmt','parser.py',41),
  ('while_stmt -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE','while_stmt',7,'p_while_stmt','parser.py',45),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',49),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',50),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',51),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',52),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',53),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',54),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',55),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',59),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',63),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','parser.py',67),
]
